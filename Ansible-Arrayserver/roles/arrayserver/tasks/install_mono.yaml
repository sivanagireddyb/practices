- name: Install epel repo
  command: amazon-linux-extras install epel
  become: yes

- name: Install Linux packages
  yum:
    name: "{{ dev_tool_packages }}"
    state: latest
  become: yes

#Installing MONO
- name: Check for existing mono installation
  command: "{{ mono_cmd_path }}/mono --version"
  ignore_errors: true
  register: current_mono

- name: Install Mono
  block:
  - name: ensure Mono downlaod dir {{mono_old_version}} exists
    file:
      path: "{{ mono_old_install_dir }}"
      state: directory
  
  - name: Download Mono {{mono_old_version}}
    get_url:
      url: http://download.mono-project.com/sources/mono/mono-{{mono_old_version}}.tar.bz2
      dest: "{{ mono_old_install_dir }}.tar.bz2"
  
  - name: Unarchive Mono {{mono_old_version}}
    ansible.builtin.unarchive:
      src: "{{ mono_old_install_dir }}.tar.bz2"
      dest: "{{ mono_old_install_dir }}/"
      creates: "{{ mono_old_install_dir }}/mono"
      owner: "{{ app_user_name }}"
      group: "{{ app_group_name }}" 
      extra_opts: [--strip-components=1]
      remote_src: yes
  
  - name: Running ./configure for Mono
    command: "./configure  --prefix={{ mono_old_install_dir }} --with-large-heap=yes"
    args: 
      chdir: "{{ mono_old_install_dir }}"
  
  - name: Running "make" for Mono
    command: make
    args: 
      chdir: "{{ mono_old_install_dir }}"
  
  - name: Running "make install" for Mono
    command: make install
    args: 
      chdir: "{{ mono_old_install_dir }}"
    become: yes
#  when: "mono_old_version|string not in current_mono.stdout" 
  tags: mono_old_version

# Installing Mono New version
- name: Mono {{ mono_version }} install
  block:
  - name: ensure Mono downlaod dir {{mono_version}} exists
    file:
      path: "{{ mono_install_dir }}"
      state: directory
  
  - name: Download Mono {{ mono_version }}
    get_url:
      url: http://download.mono-project.com/sources/mono/mono-{{mono_version}}.tar.xz
      dest: "{{mono_install_dir}}.tar.xz"
  
  - name: Unarchive Mono {{ mono_version }}
    ansible.builtin.unarchive:
      src: "{{ mono_install_dir }}.tar.xz"
      dest: "{{ mono_install_dir }}"
      creates: "{{ mono_install_dir }}/mono" 
      extra_opts: [--strip-components=1]
      owner: "{{ app_user_name }}"
      group: "{{ app_group_name }}"     
      remote_src: yes
  
  - name: Running ./configure for Mono
    command: "./configure  --prefix={{ mono_install_dir }} --with-large-heap=yes --enable-big-arrays=yes"
    args: 
      chdir: "{{ mono_install_dir }}"
  
  - name: Running "make" for Mono
    make:
      chdir: "{{ mono_install_dir }}"
  
  - name: Running "make install" for Mono
    #    make:
    #  chdir: "{{ mono_install_dir }}"
    #  target: install
    command: make install 
    args:
      chdir: "{{ mono_install_dir }}"
    become: yes

  - name: Making sure mono is installed
    shell: "{{ mono_cmd_path }}/mono --version"
    register: mono_v_op
    failed_when: "mono_v_op.rc != 0"

  - name: Delete  tar file after installation
    file: 
      path: "{{ mono_install_dir }}.tar.xz"
      state: absent      
  tags: make_mono  
#  when: "mono_version|string not in current_mono.stdout"


- name: Set paths for mono in bashprofile & bashrc
  lineinfile:
    create: yes
    path: "/home/{{ app_user_name }}/.{{ item }}"
    line: "export PATH=$PATH:{{mono_cmd_path}}"
  with_items:
    - bash_profile
    - bashrc


- name: Add the root certificates into the Mono Trust store
  shell: |
     echo |\
     openssl s_client -connect resources.omicsoft.com:443 2>&1 |\
     sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > cert.crt
     {{mono_cmd_path}}/certmgr --add -c -m Trust  cert.crt
     {{mono_cmd_path}}/certmgr --add -c -m CA  cert.crt
     {{mono_cmd_path}}/certmgr --add -c -m AddressBook  cert.crt
  args:
     chdir: "{{ mono_install_dir }}"
  become: yes

- name: Syncs Monoâ€™s certificate store with the system certificate store
  command: "{{mono_cmd_path}}/cert-sync /etc/ssl/certs/ca-bundle.crt"
  become: yes

- name: Get libgdiplus lib path
  shell: |
    /sbin/ldconfig -p | grep libgdiplus | tr ' ' '\n' | grep /
  register: libgdiplus_lib

- name: Add libgdiplus lib path to the mono config
  ansible.builtin.lineinfile:
    path: "{{ mono_install_dir }}/etc/mono/config"
    insertafter: '<dllmap dll="gdiplus.dll" target="libgdiplus.so.0"  os="!windows"/>'
    regexp: '^<dllmap dll="gdiplus.dll"'
    line: '        <dllmap dll="gdiplus.dll" target="{{ libgdiplus_lib.stdout }}"/>'
    state: present
